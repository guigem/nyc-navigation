import pandas as pd
import networkx as nx
import osmnx as ox
import osmnx


def generate_dic_edges(
    data: pd.DataFrame, edges: list, trip_type, most_dangerous: bool = False
) -> dict:
    """


    Parameters
    ----------
    data : pd.DataFrame
        Pandas dataframe with the street names and associated danger scores.
    edges : list
        List of edges and their features: node id, length, etc...
    trip_type : str
        Type of vehicle roads like drive (cars, motorbikes, ...), walk (pedestrian) or bikes.
    most_dangerous : bool
        Boolean that says if we are looking for the most dangerous road.

    Returns
    -------
    dict
        Return a dic with as keys: code as (node id start, node id end, 0)
        and as items the danger score

    """

    # Initiate dictionnary
    dic = {}
    for j in data["on_street_name"]:
        for i in range(len(edges)):
            if edges[i][3].get("name") == j:

                # Assign the good danger score based on most_dangerous and trip_type
                if most_dangerous == False:

                    if trip_type == "drive":
                        dic[edges[i][0], edges[i][1], edges[i][2]] = data[
                            data["on_street_name"] == j
                        ]["danger_score_global"].item()

                    if trip_type == "walk":
                        dic[edges[i][0], edges[i][1], edges[i][2]] = data[
                            data["on_street_name"] == j
                        ]["danger_score_pedestrians"].item()

                    if trip_type == "bike":
                        dic[edges[i][0], edges[i][1], edges[i][2]] = data[
                            data["on_street_name"] == j
                        ]["danger_score_cyclists"].item()

                else:

                    if trip_type == "drive":
                        dic[edges[i][0], edges[i][1], edges[i][2]] = data[
                            data["on_street_name"] == j
                        ]["reversed_danger_score_global"].item()

                    if trip_type == "walk":
                        dic[edges[i][0], edges[i][1], edges[i][2]] = data[
                            data["on_street_name"] == j
                        ]["reversed_danger_score_pedestrians"].item()

                    if trip_type == "bike":
                        dic[edges[i][0], edges[i][1], edges[i][2]] = data[
                            data["on_street_name"] == j
                        ]["reversed_danger_score_cyclists"].item()
    # print(dic)
    return dic


def add_edge_danger(
    data: object, G: classmethod, trip_type: str, most_dangerous: bool
) -> object:
    """


    Parameters
    ----------
    data : object
        Pandas dataframe with the street names and associated danger scores.
    G : classmethod()
        Network of streets generated by osmnx.
    trip_type : str
        Type of vehicle roads like drive (cars, motorbikes, ...), walk (pedestrian) or bikes.

    Returns
    -------
    object
        Network of streets generated by osmnx with the new attribute danger_score.

    """

    # creating a list of edges for a given city
    edges = list(G.edges(keys=True, data=True))

    # creating the dictionnary
    dic_edges = generate_dic_edges(data, edges, trip_type, most_dangerous=False)
    # print(dic_edges)

    if most_dangerous == False:

        # Add the attribute danger and set it as 0 for safest
        nx.set_edge_attributes(G, 0, "danger")

    elif most_dangerous == True:

        if trip_type == "drive":

            # Add the attribute danger and set it as 2463 for most dangerous for drive
            nx.set_edge_attributes(G, 2463, "danger")

        elif trip_type == "walk":

            # Add the attribute danger and set it as 1462 for most dangerous for walk
            nx.set_edge_attributes(G, 1462, "danger")

        elif trip_type == "bike":

            # Add the attribute danger and set it as 1457 for most dangerous for drive
            nx.set_edge_attributes(G, 1457, "danger")

    # Assign the danger score to street concerned
    nx.set_edge_attributes(G, dic_edges, "danger")

    # print(nx.get_edge_attributes(G, 'danger'))

    return G


def pick_location(trip_type: str = "drive", most_dangerous: bool = False) -> str:
    """


    Parameters
    ----------
    trip_type : str
        Type of vehicle roads like drive (cars, motorbikes, ...), walk (pedestrian) or bikes.
    most_dangerous : bool
        Boolean that says if we are looking for the most dangerous road.

    Returns
    -------
    str
        Message to congratulate our machine.

    """
    # Generate the network of NYC based on the trip_type
    G = ox.graph_from_place("New York City, New York, USA", network_type=trip_type)
    G = ox.add_edge_speeds(G)
    G = ox.add_edge_travel_times(G)
    # nodes_to_csv(G, "drive_safe_node.csv")

    # csv file with the danger scores
    data_danger = pd.read_csv(
        r"C:\Users\Guillaume\Documents\git\nyc-navigation\CSV\street.csv"
    )

    G_danger = add_edge_danger(data_danger, G, trip_type, most_dangerous)

    osmnx.io.save_graphml(G_danger, filepath="bike_dangerous.graphml")

    return "Done"


pick_location("bike", True)


# G_danger = nx.from_pandas_edgelist(adj_matrix, create_using=nx.MultiDiGraph)
